[buildout]
parts =
    crontab
    initscript

show-picked-versions = true
versions = versions

[postgres]
user = postgres
port = 8005
dbname = storsola_agenda
password = postgres
dsn = postgresql://${:user}:${:password}@localhost:${:port}/${:dbname}

[postgresql]
recipe = zc.recipe.cmmi
url = http://ftp.postgresql.org/pub/source/v9.3.4/postgresql-9.3.4.tar.bz2
extra_options =
    --with-pgport=${postgres:port}

[postgresqlinit]
recipe = iw.recipe.cmd
on_install = true
on_update = true
datadir = ${buildout:directory}/var/postgresql
cmds =
    test -e ${buildout:directory}/bin/psql || ln -s ${postgresql:location}/bin/psql ${buildout:directory}/bin/psql
    test -e ${buildout:directory}/bin/postgres || ln -s ${postgresql:location}/bin/postgres ${buildout:directory}/bin/postgres
    test -e ${:datadir} && exit 0
    ${postgresql:location}/bin/initdb --encoding=unicode -D ${:datadir}
    ${postgresql:location}/bin/postgres --single -D ${:datadir} template1 << EOF
        CREATE USER ${postgres:user} WITH PASSWORD '${postgres:password}' CREATEDB ;
        CREATE DATABASE ${postgres:dbname} OWNER ${postgres:user};
    EOF
    echo 'host all ${postgres:user} 0.0.0.0/0 md5' >> ${:datadir}/pg_hba.conf
    echo "listen_addresses = '127.0.0.1'" >> ${:datadir}/postgresql.conf
    echo "log_connections = on" >> ${:datadir}/postgresql.conf
    echo "log_statement = 'all'" >> ${:datadir}/postgresql.conf

[supervisor]
recipe = collective.recipe.supervisor
programs =
    10 postgresql ${postgresql:location}/bin/postgres [-D ${postgresqlinit:datadir}] ${postgresql:location} true
http-socket = unix
file = ${buildout:directory}/var/supervisor.sock
supervisord-user = nio

[script-macro]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/${:_buildout_section_name_}.in
output = ${buildout:directory}/bin/${:_buildout_section_name_}
mode=755

[graceful]
<= script-macro

[restart]
<= script-macro
sleep = 1

[start]
<= script-macro

[status]
<= script-macro

[stop]
<= script-macro

[initscript]
<= script-macro
requires = ${supervisor:_buildout_section_name_}
name = icribis.postgres
output = ${buildout:directory}/etc/${:_buildout_section_name_}

# The crontab part will give you sane defaults to launch this backup script
[crontab]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/${:_buildout_section_name_}.in
output = ${buildout:directory}/etc/${:_buildout_section_name_}

# The backup part will generate a bin/backup script
[backup]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/${:_buildout_section_name_}.in
output = ${buildout:directory}/bin/${:_buildout_section_name_}
directory = ${buildout:directory}/backups/latest
mode=755

# The rsnapshot part will control the history of your backup
[rsnapshot]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/${:_buildout_section_name_}.in
output = ${buildout:directory}/etc/${:_buildout_section_name_}
directory = ${buildout:directory}/backups/rsnapshot

[sources]

[versions]
